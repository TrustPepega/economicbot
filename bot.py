import disnake
import sys, os, asyncio, sqlite3 as sql3, random
from config import *
from disnake import Intents
from database import *
from Cybernator import Paginator as Pages
from disnake.ext import commands, tasks
from disnake.ext.commands import cooldown, BucketType

bot = commands.Bot(command_prefix=settings['pref'], intents=Intents.all())
bot.remove_command('help')
db = Database()
cash_range = {}
xp_range = {}
max_update = updates["max_tier"]

ch_log_enable = logging["enable"]
if ch_log_enable: ch_log_ids = logging["channel_id"]


def Log(func='anyway', txt='error'):
    _syntx = f'[{func}] {txt}'
    if ch_log_enable:
        for id_ in ch_log_ids:
            chan = bot.get_channel(id_)
            chan.send(_syntx)
    print(_syntx)


def calculate_xp_to_newlvl(xpNow, lvlNew):
    base_xp, max_lvl, xp_needed = settings["base_xp"], settings["max_lvl"], 0
    if lvlNew >= max_lvl:
        return 0
    for level in range(1, lvlNew):
        xp_needed += base_xp * level * 5.0
    return round(xp_needed)


@bot.event
async def on_ready():
    print(f"ID –ë–æ—Ç–∞ - {bot.user.id} | –ò–º—è –ë–æ—Ç–∞ - {bot.user.name} | (connected)")

    for i in range(1, max_update):
        cash = updates['tier{}_money'.format(i)]
        cash_range[i] = cash
        exp = xp['tier{}'.format(i)]
        xp_range[i] = exp
    for guild in bot.guilds:
        for member in guild.members:
            if not db.check_user(member.id):
                db.register_user(member)


@bot.command(aliases=['rep'])
@commands.cooldown(1, 14400, commands.BucketType.user)
async def giverep(ctx, member: disnake.Member = None):
    if not member:
        giverep.reset_cooldown(ctx)
        await ctx.send(f'_**{ctx.author.name}**_, —É–∫–∞–∂–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–∞—Ç—å –µ–º—É rep (—Ä–µ–ø—É—Ç–∞—Ü–∏—é)!')
    else:
        if member.id == ctx.author.id:
            giverep.reset_cooldown(ctx)
            await ctx.send(f'_**{ctx.author.name}**_, –Ω–µ–ª—å–∑—è –≤—ã–¥–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ —Ä–µ–ø—É—Ç–∞—Ü–∏—é!')
        else:
            db.give_reputation(member)
            await ctx.send(f"_**{ctx.author.name}**_, –í—ã –≤—ã–¥–∞–ª–∏ **{member}** 1 —Ä–µ–ø—É—Ç–∞—Ü–∏—é.")


@bot.event
async def on_message(message):
    await bot.process_commands(message)
    if message.content.startswith(tuple(',.!+@$%^&*')):
        pass
    else:
        update_value = db.get_update(message.author)
        if update_value in cash_range:
            to_cash = random.randint(*cash_range[update_value])
            to_xp = random.randint(*xp_range[update_value])
            db.give_cash(message.author, to_cash)
            db.give_exp(message.author, to_xp)


@bot.event
async def on_member_join(member):
    if not db.check_user(member.id):
        db.register_user(member)


@bot.event
async def on_member_remove(member):
    db.delete_user(member)


@tasks.loop(minutes=10)
async def checker():
    for row in db.get_users_all():
        calc = calculate_xp_to_newlvl(row["xp"], row["lvl"] + 1)
        if calc == 0:
            return
        if row["xp"] >= calc:
            Log("Checker", f"{row['xp']} >= {calc}")
            db.set_level(row["id"], row["lvl"] + 1)
            user = bot.get_user(row["id"])
            if user:
                try:
                    await user.send(f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {row['lvl'] + 1} —É—Ä–æ–≤–Ω—è! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!")
                finally:
                    Log("Checker", f"{user.display_name} –ø–æ–¥–Ω—è–ª —É—Ä–æ–≤–µ–Ω—å")


@bot.command(aliases=['cash', 'balance', 'profile'])
async def __money(ctx, member: disnake.Member = None):
    if not member:
        member = ctx.author
    user = db.get_user_all(member)
    cash, rep, lvl, xp = user["cash"], user["rep"], user["lvl"], user["xp"]
    update = user["_update"]
    embed = disnake.Embed(title=f'{member.name}',
                          description=f" –ë–∞–ª–∞–Ω—Å - {cash} {walletcase['I_m']} \n–†–µ–ø—É—Ç–∞—Ü–∏—è: {rep} \nLVL: {lvl} | XP: {xp} "
                                      f"\n–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update}")
    embed.set_footer(text=f'2023 ¬© {bot.user.display_name}')
    await ctx.send(embed=embed)


@bot.command(aliases=['addmoney'])
@commands.has_any_role(*settings['admin_roles'])
async def award(ctx, member: disnake.Member = None, amount: int = None):
    if not member:
        await ctx.send(f'_**{ctx.author.name}**_, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–±–∞–≤–∏—Ç—å –¥–µ–Ω–µ–≥.')
    else:
        if not amount:
            await ctx.send(f'_**{ctx.author.name}**_, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–æ–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.')
        elif amount <= 1:
            await ctx.send(f'_**{ctx.author.name}**_, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ 1 –∫–æ–π–Ω–∞.')
        else:
            db.give_cash(member, amount)
            await ctx.message.add_reaction('üéâ')


@bot.command(aliases=['removemoney'])
@commands.has_any_role(*settings['admin_roles'])
async def take(ctx, member: disnake.Member = None, amount: int = None):
    if member == None:
        await ctx.send(f'_**{ctx.author.name}**_, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ —É–±–∞–≤–∏—Ç—å –¥–µ–Ω–µ–≥.')
    else:
        if not amount:
            await ctx.send(f'_**{ctx.author.name}**_, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–æ–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ —É–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.')
        elif amount == 'all':
            db.set_cash(member, 0)
            await ctx.message.add_reaction('üéâ')
        elif amount < 1:
            await ctx.send(f'_**{ctx.author.name}**_, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ 1 –∫–æ–π–Ω–∞.')
        else:
            db.remove_cash(member, amount)
            await ctx.message.add_reaction('üéâ')


@bot.command(aliases=['addtoshop', 'atshop'])
@commands.has_any_role(*settings['admin_roles'])
async def __atshop1(ctx, role: disnake.Role = None, channel: disnake.TextChannel = None, cost: int = None):
    if role and channel:
        if not cost:
            await ctx.send(f'_**{ctx.author.name}**_, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Ä–æ–ª–∏.')
        elif cost <= 0:
            await ctx.send(f"_**{ctx.author.name}**_, —É–∫–∞–∂–∏—Ç–µ –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –∏–ª–∏ –Ω–µ —Ä–∞–≤–Ω—É—é 0 —Å—É–º–º—É –¥–ª—è —Ä–æ–ª–∏.")
        else:
            db.shop_add(role.id, channel.id, cost)
            await ctx.message.add_reaction('üéâ')

    elif role and not channel:
        if not cost:
            await ctx.send(f'_**{ctx.author.name}**_, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Ä–æ–ª–∏.')
        elif cost <= 0:
            await ctx.send(f"_**{ctx.author.name}**_, —É–∫–∞–∂–∏—Ç–µ –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –∏–ª–∏ –Ω–µ —Ä–∞–≤–Ω—É—é 0 —Å—É–º–º—É –¥–ª—è —Ä–æ–ª–∏.")
        else:
            db.shop_add(role.id, amount=cost)
            await ctx.message.add_reaction('üéâ')

    elif channel and not role:
        if not cost:
            await ctx.send(f'_**{ctx.author.name}**_, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–∞–Ω–∞–ª–∞.')
        elif cost <= 0:
            await ctx.send(f"_**{ctx.author.name}**_, —É–∫–∞–∂–∏—Ç–µ –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –∏–ª–∏ –Ω–µ —Ä–∞–≤–Ω—É—é 0 —Å—É–º–º—É –¥–ª—è –∫–∞–Ω–∞–ª–∞.")
        else:
            db.shop_add(channel.id, amount=cost)
            await ctx.message.add_reaction('üéâ')
    elif not channel and not role:
        await ctx.send(f'_**{ctx.author.name}**_, —É–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ —Ä–æ–ª—å.')


@bot.command(aliases=['deletefromshop', 'dfshop'])
@commands.has_any_role(*settings['admin_roles'])
async def __dfshop1(ctx, role: disnake.Role = None, channel: disnake.TextChannel = None):
    if role:
        db.shop_remove(role=role.id)
        await ctx.message.add_reaction('üéâ')
    elif channel:
        db.shop_remove(role=channel.id)
        await ctx.message.add_reaction('üéâ')
    else:
        await ctx.send(f'_**{ctx.author.name}**_, —É–∫–∞–∂–∏—Ç–µ —Ä–æ–ª—å –∏–ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.')


@bot.command(aliases=['shop'])
async def __shop(ctx: disnake.Message):
    if settings['shop_desc_enable']:
        embed = disnake.Embed(title='–ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π –∏ –∫–∞–Ω–∞–ª–æ–≤',
                              description='–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —Ä–æ–ª—å –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É.')
    else:
        embed = disnake.Embed(title='–ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π –∏ –∫–∞–Ω–∞–ª–æ–≤')
    channel_ = role_ = False
    channel_id = role_id = cost = 0
    for row in db.shop_get_all():
        if ctx.guild.get_role(row["id_role"]) is not None:
            role_ = True
            role_id = row["id_role"]
            cost = row["cost"]
        if ctx.guild.get_channel(row["id_channel"]) is not None:
            channel_ = True
            channel_id = row["id_channel"]
            cost = row["cost"]
        if role_ and channel_:
            embed.add_field(
                name=f"–¶–µ–Ω–∞ - **{cost}** {walletcase['I_m']}",
                value=f"–†–æ–ª—å - {ctx.guild.get_role(role_id).mention}"
                      f"\n–ö–∞–Ω–∞–ª - #{ctx.guild.get_channel(row['id_channel'])}",
                inline=False
            )
        elif role_ and not channel_:
            embed.add_field(
                name=f"–¶–µ–Ω–∞ - **{cost}** {walletcase['I_m']}",
                value=f"–†–æ–ª—å - {ctx.guild.get_role(role_id).mention}",
                inline=False
            )
        elif channel_ and not role_:
            embed.add_field(
                name=f"–¶–µ–Ω–∞ - **{cost}** {walletcase['I_m']}",
                value=f"–ö–∞–Ω–∞–ª - #{ctx.guild.get_channel(channel_id)}",
                inline=False
            )
    await ctx.send(embed=embed)


@bot.command(aliases=['buy', 'getrole'])
async def __buyshop(ctx: disnake.Member, role: disnake.Role = None, channel: disnake.TextChannel = None):
    money = db.get_money(ctx.author)
    if role:
        price = db.shop_get_price(role.id)
        if role in ctx.author.roles:
            await ctx.send(f'**{ctx.author.name}**, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–∞ —Ä–æ–ª—å!')
        elif price > money:
            await ctx.send(f"**{ctx.author.name}**, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!")
        elif price <= money:
            await ctx.author.add_roles(role)
            await ctx.message.add_reaction('üéâ')
            await ctx.send(
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, **{ctx.author.name}**, –≤—ã –∫—É–ø–∏–ª–∏ —Ä–æ–ª—å {ctx.guild.get_role(role.id).mention}!")
    elif channel:
        price = db.shop_get_price(channel.id)
        if role in ctx.author.roles:
            await ctx.send(f'**{ctx.author.name}**, –≤—ã —É–∂–µ –≤ —Å–æ—Å—Ç–∞–∏—Ç–µ –≤ –¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ!')
        elif price > money:
            await ctx.send(f"**{ctx.author.name}**, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!")
        elif price <= money:
            await channel.set_permissions(ctx.author, read_messages=True)
            await ctx.message.add_reaction('üéâ')
            await ctx.send(
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, **{ctx.author.name}**, –≤—ã –∫—É–ø–∏–ª–∏ —Ä–æ–ª—å {ctx.guild.get_channel(channel.id).mention}!")
    else:
        await ctx.send(f":x: **{ctx.author.name}**, —É–ø–æ–º—è–Ω–∏—Ç–µ —Ä–æ–ª—å –∏–ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞")


@bot.command(aliases=['update', 'moneyupdate'])
async def __mupdate(ctx):
    member = ctx.author
    update = db.get_update(member.id)
    money = db.get_money(member)
    max_update = updates["max_tier"]
    if not member:
        if update >= max_update:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–ª—É—á—à–µ–Ω–∏–π
            await ctx.send('–í—ã —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ —Å–≤–æ–π –¥–æ—Ö–æ–¥ –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.')
        else:
            for i in range(update + 1, max_update + 1):  # –¶–∏–∫–ª –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è
                cost = updates['cost_tier{}'.format(i)]  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
                if money < cost:
                    await ctx.send('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è {} —Ç–∏—Ä–∞.'.format(i))
                else:
                    await ctx.send('–í—ã –∫—É–ø–∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ {} —Ç–∏—Ä–∞.'.format(i))
                    db.remove_cash(member, cost)
                    db.set_update(member, i)


@bot.command(aliases=['banWallet'])
@commands.has_any_role(*settings['admin_roles'])
async def __bantob(ctx, member: disnake.Member = None):
    if not member:
        await ctx.send(':x: –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')
    else:
        if member.id == ctx.author.id:
            await ctx.send(':x: –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–µ–±—è!')
        else:
            db.set_update(member, 0)
            await ctx.message.add_reaction('üéâ')

    # @bot.event
    # async def on_command_error(ctx, error):
    """if isinstance(error, commands.BadArgument):
        await ctx.send(embed=disnake.Embed(description=f':x: –û—à–∏–±–∫–∞, {ctx.author.name}, –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ –Ω–µ –≤–µ—Ä–Ω—ã!',
                                           colour=disnake.Color.red()))
    elif isinstance(error, commands.MemberNotFound):
        await ctx.send(embed=disnake.Embed(description=f':x: –£–ø—Å!.. {ctx.author.name}, —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω! :x:',
                                           colour=disnake.Color.red()))
    elif isinstance(error, commands.MissingPermissions):
        await ctx.send(embed=disnake.Embed(description=f':x: –û—à–∏–±–∫–∞, {ctx.author.name}, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!',
                                           colour=disnake.Color.red()))
    elif isinstance(error, commands.CommandNotFound):
        await ctx.send(embed=disnake.Embed(description=f':x: –û—à–∏–±–∫–∞, {ctx.author.name}, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!',
                                           colour=disnake.Color.red()))
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(embed=disnake.Embed(description=f':x: –û—à–∏–±–∫–∞, {ctx.author.name}, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!',
                                           colour=disnake.Color.red()))
    elif isinstance(error, commands.CheckFailure):
        await ctx.send(embed=disnake.Embed(
            description=f':x: –û—à–∏–±–∫–∞, {ctx.author.name}, –≤—ã –ø–∏—à–∏—Ç–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, –≥–¥–µ –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è NSFW!',
            colour=disnake.Color.red()))
    elif isinstance(error, commands.CommandOnCooldown):
        await ctx.send(embed=disnake.Embed(
            description=f':x: –ü–æ–≥–æ–¥–∏—Ç–µ! {ctx.author.name}, –∫–æ–º–∞–Ω–¥–∞ –≤ –∫—É–ª–¥–∞—É–Ω–µ. –û—Å—Ç–∞–ª–æ—Å—å {error.retry_after:.2f} —Å–µ–∫—É–Ω–¥'))
    else:"""
    # raise error


@bot.command(aliases=['Help', 'help', 'HELP', 'hELP'])
async def __help(ctx: disnake.ext.commands.Context):
    prefix = settings["pref"]

    embed1 = disnake.Embed(title='–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 | Help',
                           description='–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 | –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ \n–°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 | –ë–∞–ª–∞–Ω—Å \n–°—Ç—Ä–∞–Ω–∏—Ü–∞ 3 | –ú–∞–≥–∞–∑–∏–Ω \n–°—Ç—Ä–∞–Ω–∏—Ü–∞ 4 | –†–µ–ø—É—Ç–∞—Ü–∏—è \n–°—Ç—Ä–∞–Ω–∏—Ü–∞ 5 | –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥',
                           colour=disnake.Color.magenta())
    embed1.set_thumbnail(url="https://icons.iconarchive.com/icons/alecive/flatwoken/128/Apps-Help-icon.png")
    embed1.set_author(name=ctx.author.name, icon_url=ctx.author.avatar.url)
    embed1.set_footer(text="–ë–æ—Ç –≤ –±–µ—Ç–∞ —Ç–µ—Å—Ç–µ.")

    embed2 = disnake.Embed(title='–°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 | –ë–∞–ª–∞–Ω—Å',
                           description=f'–ü–æ–ª—É—á–∞—Ç—å **{walletcase["KG"]}** –º–æ–∂–Ω–æ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:\n1. –∫—É–ø–∏—Ç—å –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏ \n2. –ü–∏—Å–∞—Ç—å –≤ —á–∞—Ç–µ',
                           colour=disnake.Color.magenta())
    embed2.set_thumbnail(url="https://icons.iconarchive.com/icons/alecive/flatwoken/128/Apps-Help-icon.png")
    embed2.set_author(name=ctx.author.name, icon_url=ctx.author.avatar.url)
    embed2.add_field(name='–ë–∞–ª–∞–Ω—Å', value=f'`{prefix}cash` `{prefix}balance` `{prefix}update`', inline=False)

    embed3 = disnake.Embed(title='–°—Ç—Ä–∞–Ω–∏—Ü–∞ 3 | –ú–∞–≥–∞–∑–∏–Ω',
                           description=f'–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å (–∏–ª–∏ –∫–∞–Ω–∞–ª) –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å –µ—ë –Ω–µ—Ç –∏ –≤–∞–º —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ –Ω–µ—ë –≤–∞–ª—é—Ç—ã.',
                           colour=disnake.Color.magenta())
    embed3.set_thumbnail(url="https://icons.iconarchive.com/icons/alecive/flatwoken/128/Apps-Help-icon.png")
    embed3.set_author(name=ctx.author.name, icon_url=ctx.author.avatar.url)
    embed3.add_field(name='–ú–∞–≥–∞–∑–∏–Ω', value=f' `{prefix}shop` `{prefix}buy`', inline=False)

    embed4 = disnake.Embed(title='–°—Ç—Ä–∞–Ω–∏—Ü–∞ 4 | –†–µ–ø—É—Ç–∞—Ü–∏—è',
                           description=f'–ó–∞ —Å—á—ë—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∏—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.',
                           colour=disnake.Color.magenta())
    embed4.set_thumbnail(url="https://icons.iconarchive.com/icons/alecive/flatwoken/128/Apps-Help-icon.png")
    embed4.set_author(name=ctx.author.name, icon_url=ctx.author.avatar.url)
    embed4.add_field(name='–†–µ–ø—É—Ç–∞—Ü–∏—è', value=f' `{prefix}rep`', inline=False)

    embed5 = disnake.Embed(title='–°—Ç—Ä–∞–Ω–∏—Ü–∞ 5 | –°–∏–Ω—Ç–∞–∫—Å–∏—Å', description=f'–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥.',
                           colour=disnake.Color.magenta())
    embed5.set_thumbnail(url="https://icons.iconarchive.com/icons/alecive/flatwoken/128/Apps-Help-icon.png")
    embed5.set_author(name=ctx.author.name, icon_url=ctx.author.avatar.url)
    embed5.add_field(name=f'–°–∏–Ω—Ç–∞–∫—Å–∏—Å',
                     value=f'`{prefix}cash <–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞>` \n`{prefix}shop` \n`{prefix}buy <—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–æ–ª–∏>` \n`{prefix}rep <—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞>`',
                     inline=False)

    embeds = [embed1, embed2, embed3, embed4, embed5]
    msg = await ctx.send(embed=embed1)

    page = Pages(bot, msg, only=ctx.author, use_more=False, embeds=embeds)
    await page.start()


checker.start()
bot.run(settings['Token'])
